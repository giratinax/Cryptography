#include <stdio.h>
#include <ctype.h>

// Function to check if a number is coprime with 26
int isCoprime(int a) {
    return (a % 2 != 0) && (a % 13 != 0);
}

// Function to find modular inverse of a number
int modInverse(int a) {
    for (int i = 1; i < 26; i++) {
        if ((a * i) % 26 == 1) {
            return i;
        }
    }
    return -1; // No modular inverse exists
}

// Function to encrypt a character using Affine Caesar cipher
char encryptChar(char ch, int a, int b) {
    if (isalpha(ch)) {
        char base = isupper(ch) ? 'A' : 'a';
        return (char)(((a * (ch - base) + b) % 26) + base);
    }
    return ch; // Non-alphabetic characters are unchanged
}

// Function to decrypt a character using Affine Caesar cipher
char decryptChar(char ch, int a, int b) {
    if (isalpha(ch)) {
        char base = isupper(ch) ? 'A' : 'a';
        int aInverse = modInverse(a);
        if (aInverse != -1) {
            return (char)((aInverse * (ch - base - b + 26) % 26) + base);
        }
    }
    return ch; // Non-alphabetic characters are unchanged
}

// Function to encrypt a string using Affine Caesar cipher
void encryptString(char *plaintext, int a, int b) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        plaintext[i] = encryptChar(plaintext[i], a, b);
    }
}

// Function to decrypt a string using Affine Caesar cipher
void decryptString(char *ciphertext, int a, int b) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        ciphertext[i] = decryptChar(ciphertext[i], a, b);
    }
}

int main() {
    char plaintext[1000];
    char ciphertext[1000];
    int a, b;

    // Input plaintext, a, and b
    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    printf("Enter value for a (must be coprime with 26): ");
    scanf("%d", &a);
    printf("Enter value for b: ");
    scanf("%d", &b);

    // Remove newline characters from inputs
    plaintext[strcspn(plaintext, "\n")] = '\0';

    // Check if a is coprime with 26
    if (!isCoprime(a)) {
        printf("Error: 'a' must be coprime with 26\n");
        return 1;
    }

    // Encrypt and print the result
    strcpy(ciphertext, plaintext);
    encryptString(ciphertext, a, b);
    printf("Encrypted Text: %s\n", ciphertext);

    // Decrypt and print the result
    decryptString(ciphertext, a, b);
    printf("Decrypted Text: %s\n", ciphertext);

    return 0;
}
